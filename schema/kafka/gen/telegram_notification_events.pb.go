// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v5.28.2
// source: telegram_notification_events.proto

package gen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NotificationEventType int32

const (
	NotificationEventType_UNSPECIFIED_EVENT_TYPE                 NotificationEventType = 0
	NotificationEventType_BALANCE_REPLENISHMENT_EVENT_TYPE       NotificationEventType = 1
	NotificationEventType_BALANCE_WITHDRAWAL_EVENT_TYPE          NotificationEventType = 2
	NotificationEventType_POST_REQUEST_EVENT_TYPE                NotificationEventType = 3
	NotificationEventType_CHANGE_PURCHASE_STATUS_EVENT_TYPE      NotificationEventType = 4
	NotificationEventType_SEND_ADV_REQUEST_TO_MANAGER_EVENT_TYPE NotificationEventType = 5
	NotificationEventType_SEND_CREATIVE_TO_USER_EVENT_TYPE       NotificationEventType = 6
)

// Enum value maps for NotificationEventType.
var (
	NotificationEventType_name = map[int32]string{
		0: "UNSPECIFIED_EVENT_TYPE",
		1: "BALANCE_REPLENISHMENT_EVENT_TYPE",
		2: "BALANCE_WITHDRAWAL_EVENT_TYPE",
		3: "POST_REQUEST_EVENT_TYPE",
		4: "CHANGE_PURCHASE_STATUS_EVENT_TYPE",
		5: "SEND_ADV_REQUEST_TO_MANAGER_EVENT_TYPE",
		6: "SEND_CREATIVE_TO_USER_EVENT_TYPE",
	}
	NotificationEventType_value = map[string]int32{
		"UNSPECIFIED_EVENT_TYPE":                 0,
		"BALANCE_REPLENISHMENT_EVENT_TYPE":       1,
		"BALANCE_WITHDRAWAL_EVENT_TYPE":          2,
		"POST_REQUEST_EVENT_TYPE":                3,
		"CHANGE_PURCHASE_STATUS_EVENT_TYPE":      4,
		"SEND_ADV_REQUEST_TO_MANAGER_EVENT_TYPE": 5,
		"SEND_CREATIVE_TO_USER_EVENT_TYPE":       6,
	}
)

func (x NotificationEventType) Enum() *NotificationEventType {
	p := new(NotificationEventType)
	*p = x
	return p
}

func (x NotificationEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotificationEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_telegram_notification_events_proto_enumTypes[0].Descriptor()
}

func (NotificationEventType) Type() protoreflect.EnumType {
	return &file_telegram_notification_events_proto_enumTypes[0]
}

func (x NotificationEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotificationEventType.Descriptor instead.
func (NotificationEventType) EnumDescriptor() ([]byte, []int) {
	return file_telegram_notification_events_proto_rawDescGZIP(), []int{0}
}

type BalanceReplenishmentEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sum                  string `protobuf:"bytes,1,opt,name=sum,proto3" json:"sum,omitempty"`
	CompanyName          string `protobuf:"bytes,2,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	UserTelegramId       int64  `protobuf:"varint,3,opt,name=user_telegram_id,json=userTelegramId,proto3" json:"user_telegram_id,omitempty"`
	UserTelegramNickname string `protobuf:"bytes,4,opt,name=user_telegram_nickname,json=userTelegramNickname,proto3" json:"user_telegram_nickname,omitempty"`
}

func (x *BalanceReplenishmentEvent) Reset() {
	*x = BalanceReplenishmentEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telegram_notification_events_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceReplenishmentEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceReplenishmentEvent) ProtoMessage() {}

func (x *BalanceReplenishmentEvent) ProtoReflect() protoreflect.Message {
	mi := &file_telegram_notification_events_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceReplenishmentEvent.ProtoReflect.Descriptor instead.
func (*BalanceReplenishmentEvent) Descriptor() ([]byte, []int) {
	return file_telegram_notification_events_proto_rawDescGZIP(), []int{0}
}

func (x *BalanceReplenishmentEvent) GetSum() string {
	if x != nil {
		return x.Sum
	}
	return ""
}

func (x *BalanceReplenishmentEvent) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *BalanceReplenishmentEvent) GetUserTelegramId() int64 {
	if x != nil {
		return x.UserTelegramId
	}
	return 0
}

func (x *BalanceReplenishmentEvent) GetUserTelegramNickname() string {
	if x != nil {
		return x.UserTelegramNickname
	}
	return ""
}

type BalanceWithdrawalEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sum                  string `protobuf:"bytes,1,opt,name=sum,proto3" json:"sum,omitempty"`
	CompanyName          string `protobuf:"bytes,2,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	UserTelegramId       int64  `protobuf:"varint,3,opt,name=user_telegram_id,json=userTelegramId,proto3" json:"user_telegram_id,omitempty"`
	UserTelegramNickname string `protobuf:"bytes,4,opt,name=user_telegram_nickname,json=userTelegramNickname,proto3" json:"user_telegram_nickname,omitempty"`
}

func (x *BalanceWithdrawalEvent) Reset() {
	*x = BalanceWithdrawalEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telegram_notification_events_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceWithdrawalEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceWithdrawalEvent) ProtoMessage() {}

func (x *BalanceWithdrawalEvent) ProtoReflect() protoreflect.Message {
	mi := &file_telegram_notification_events_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceWithdrawalEvent.ProtoReflect.Descriptor instead.
func (*BalanceWithdrawalEvent) Descriptor() ([]byte, []int) {
	return file_telegram_notification_events_proto_rawDescGZIP(), []int{1}
}

func (x *BalanceWithdrawalEvent) GetSum() string {
	if x != nil {
		return x.Sum
	}
	return ""
}

func (x *BalanceWithdrawalEvent) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *BalanceWithdrawalEvent) GetUserTelegramId() int64 {
	if x != nil {
		return x.UserTelegramId
	}
	return 0
}

func (x *BalanceWithdrawalEvent) GetUserTelegramNickname() string {
	if x != nil {
		return x.UserTelegramNickname
	}
	return ""
}

type TelegramUserData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Username     string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	FirstName    string `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName     string `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	LanguageCode string `protobuf:"bytes,5,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
}

func (x *TelegramUserData) Reset() {
	*x = TelegramUserData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telegram_notification_events_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelegramUserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelegramUserData) ProtoMessage() {}

func (x *TelegramUserData) ProtoReflect() protoreflect.Message {
	mi := &file_telegram_notification_events_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelegramUserData.ProtoReflect.Descriptor instead.
func (*TelegramUserData) Descriptor() ([]byte, []int) {
	return file_telegram_notification_events_proto_rawDescGZIP(), []int{2}
}

func (x *TelegramUserData) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TelegramUserData) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *TelegramUserData) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *TelegramUserData) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *TelegramUserData) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

type PostRequestEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PurchaseId            string                 `protobuf:"bytes,1,opt,name=purchase_id,json=purchaseId,proto3" json:"purchase_id,omitempty"`
	AdvertisedChannelName string                 `protobuf:"bytes,2,opt,name=advertised_channel_name,json=advertisedChannelName,proto3" json:"advertised_channel_name,omitempty"`
	AdvertisedChannelLink string                 `protobuf:"bytes,3,opt,name=advertised_channel_link,json=advertisedChannelLink,proto3" json:"advertised_channel_link,omitempty"`
	PlacementChannelName  string                 `protobuf:"bytes,4,opt,name=placement_channel_name,json=placementChannelName,proto3" json:"placement_channel_name,omitempty"`
	PlacementChannelLink  string                 `protobuf:"bytes,5,opt,name=placement_channel_link,json=placementChannelLink,proto3" json:"placement_channel_link,omitempty"`
	Cost                  string                 `protobuf:"bytes,6,opt,name=cost,proto3" json:"cost,omitempty"`
	Currency              string                 `protobuf:"bytes,7,opt,name=currency,proto3" json:"currency,omitempty"`
	PlacementDate         *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=placement_date,json=placementDate,proto3" json:"placement_date,omitempty"`
	PlacementFormat       string                 `protobuf:"bytes,9,opt,name=placement_format,json=placementFormat,proto3" json:"placement_format,omitempty"`
	ApplierNickname       string                 `protobuf:"bytes,10,opt,name=applier_nickname,json=applierNickname,proto3" json:"applier_nickname,omitempty"`
	ChannelAdminNickname  string                 `protobuf:"bytes,11,opt,name=channel_admin_nickname,json=channelAdminNickname,proto3" json:"channel_admin_nickname,omitempty"`
	ApplierTelegramData   *TelegramUserData      `protobuf:"bytes,12,opt,name=applier_telegram_data,json=applierTelegramData,proto3" json:"applier_telegram_data,omitempty"`
	ContainerId           string                 `protobuf:"bytes,13,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	CreativeStoredIn      *CreativeStoredIn      `protobuf:"bytes,14,opt,name=creative_stored_in,json=creativeStoredIn,proto3" json:"creative_stored_in,omitempty"`
}

func (x *PostRequestEvent) Reset() {
	*x = PostRequestEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telegram_notification_events_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostRequestEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostRequestEvent) ProtoMessage() {}

func (x *PostRequestEvent) ProtoReflect() protoreflect.Message {
	mi := &file_telegram_notification_events_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostRequestEvent.ProtoReflect.Descriptor instead.
func (*PostRequestEvent) Descriptor() ([]byte, []int) {
	return file_telegram_notification_events_proto_rawDescGZIP(), []int{3}
}

func (x *PostRequestEvent) GetPurchaseId() string {
	if x != nil {
		return x.PurchaseId
	}
	return ""
}

func (x *PostRequestEvent) GetAdvertisedChannelName() string {
	if x != nil {
		return x.AdvertisedChannelName
	}
	return ""
}

func (x *PostRequestEvent) GetAdvertisedChannelLink() string {
	if x != nil {
		return x.AdvertisedChannelLink
	}
	return ""
}

func (x *PostRequestEvent) GetPlacementChannelName() string {
	if x != nil {
		return x.PlacementChannelName
	}
	return ""
}

func (x *PostRequestEvent) GetPlacementChannelLink() string {
	if x != nil {
		return x.PlacementChannelLink
	}
	return ""
}

func (x *PostRequestEvent) GetCost() string {
	if x != nil {
		return x.Cost
	}
	return ""
}

func (x *PostRequestEvent) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *PostRequestEvent) GetPlacementDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PlacementDate
	}
	return nil
}

func (x *PostRequestEvent) GetPlacementFormat() string {
	if x != nil {
		return x.PlacementFormat
	}
	return ""
}

func (x *PostRequestEvent) GetApplierNickname() string {
	if x != nil {
		return x.ApplierNickname
	}
	return ""
}

func (x *PostRequestEvent) GetChannelAdminNickname() string {
	if x != nil {
		return x.ChannelAdminNickname
	}
	return ""
}

func (x *PostRequestEvent) GetApplierTelegramData() *TelegramUserData {
	if x != nil {
		return x.ApplierTelegramData
	}
	return nil
}

func (x *PostRequestEvent) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *PostRequestEvent) GetCreativeStoredIn() *CreativeStoredIn {
	if x != nil {
		return x.CreativeStoredIn
	}
	return nil
}

type ChangePurchaseStatusEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PurchaseId            string                 `protobuf:"bytes,1,opt,name=purchase_id,json=purchaseId,proto3" json:"purchase_id,omitempty"`
	AdvertisedChannelName string                 `protobuf:"bytes,2,opt,name=advertised_channel_name,json=advertisedChannelName,proto3" json:"advertised_channel_name,omitempty"`
	AdvertisedChannelLink string                 `protobuf:"bytes,3,opt,name=advertised_channel_link,json=advertisedChannelLink,proto3" json:"advertised_channel_link,omitempty"`
	PlacementChannelName  string                 `protobuf:"bytes,4,opt,name=placement_channel_name,json=placementChannelName,proto3" json:"placement_channel_name,omitempty"`
	PlacementChannelLink  string                 `protobuf:"bytes,5,opt,name=placement_channel_link,json=placementChannelLink,proto3" json:"placement_channel_link,omitempty"`
	Cost                  string                 `protobuf:"bytes,6,opt,name=cost,proto3" json:"cost,omitempty"`
	Currency              string                 `protobuf:"bytes,7,opt,name=currency,proto3" json:"currency,omitempty"`
	PlacementDate         *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=placement_date,json=placementDate,proto3" json:"placement_date,omitempty"`
	PlacementFormat       string                 `protobuf:"bytes,9,opt,name=placement_format,json=placementFormat,proto3" json:"placement_format,omitempty"`
	ApplierNickname       string                 `protobuf:"bytes,10,opt,name=applier_nickname,json=applierNickname,proto3" json:"applier_nickname,omitempty"`
	ChannelAdminNickname  string                 `protobuf:"bytes,11,opt,name=channel_admin_nickname,json=channelAdminNickname,proto3" json:"channel_admin_nickname,omitempty"`
	ApplierTelegramData   *TelegramUserData      `protobuf:"bytes,12,opt,name=applier_telegram_data,json=applierTelegramData,proto3" json:"applier_telegram_data,omitempty"`
	PurchaseStatus        string                 `protobuf:"bytes,13,opt,name=purchase_status,json=purchaseStatus,proto3" json:"purchase_status,omitempty"`
}

func (x *ChangePurchaseStatusEvent) Reset() {
	*x = ChangePurchaseStatusEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telegram_notification_events_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePurchaseStatusEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePurchaseStatusEvent) ProtoMessage() {}

func (x *ChangePurchaseStatusEvent) ProtoReflect() protoreflect.Message {
	mi := &file_telegram_notification_events_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePurchaseStatusEvent.ProtoReflect.Descriptor instead.
func (*ChangePurchaseStatusEvent) Descriptor() ([]byte, []int) {
	return file_telegram_notification_events_proto_rawDescGZIP(), []int{4}
}

func (x *ChangePurchaseStatusEvent) GetPurchaseId() string {
	if x != nil {
		return x.PurchaseId
	}
	return ""
}

func (x *ChangePurchaseStatusEvent) GetAdvertisedChannelName() string {
	if x != nil {
		return x.AdvertisedChannelName
	}
	return ""
}

func (x *ChangePurchaseStatusEvent) GetAdvertisedChannelLink() string {
	if x != nil {
		return x.AdvertisedChannelLink
	}
	return ""
}

func (x *ChangePurchaseStatusEvent) GetPlacementChannelName() string {
	if x != nil {
		return x.PlacementChannelName
	}
	return ""
}

func (x *ChangePurchaseStatusEvent) GetPlacementChannelLink() string {
	if x != nil {
		return x.PlacementChannelLink
	}
	return ""
}

func (x *ChangePurchaseStatusEvent) GetCost() string {
	if x != nil {
		return x.Cost
	}
	return ""
}

func (x *ChangePurchaseStatusEvent) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *ChangePurchaseStatusEvent) GetPlacementDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PlacementDate
	}
	return nil
}

func (x *ChangePurchaseStatusEvent) GetPlacementFormat() string {
	if x != nil {
		return x.PlacementFormat
	}
	return ""
}

func (x *ChangePurchaseStatusEvent) GetApplierNickname() string {
	if x != nil {
		return x.ApplierNickname
	}
	return ""
}

func (x *ChangePurchaseStatusEvent) GetChannelAdminNickname() string {
	if x != nil {
		return x.ChannelAdminNickname
	}
	return ""
}

func (x *ChangePurchaseStatusEvent) GetApplierTelegramData() *TelegramUserData {
	if x != nil {
		return x.ApplierTelegramData
	}
	return nil
}

func (x *ChangePurchaseStatusEvent) GetPurchaseStatus() string {
	if x != nil {
		return x.PurchaseStatus
	}
	return ""
}

type SendCreativeToUserEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId               int64             `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CreativeStoredIn     *CreativeStoredIn `protobuf:"bytes,2,opt,name=creative_stored_in,json=creativeStoredIn,proto3" json:"creative_stored_in,omitempty"`
	PlacementChannelName string            `protobuf:"bytes,3,opt,name=placement_channel_name,json=placementChannelName,proto3" json:"placement_channel_name,omitempty"`
	PlacementChannelLink string            `protobuf:"bytes,4,opt,name=placement_channel_link,json=placementChannelLink,proto3" json:"placement_channel_link,omitempty"`
}

func (x *SendCreativeToUserEvent) Reset() {
	*x = SendCreativeToUserEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telegram_notification_events_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendCreativeToUserEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendCreativeToUserEvent) ProtoMessage() {}

func (x *SendCreativeToUserEvent) ProtoReflect() protoreflect.Message {
	mi := &file_telegram_notification_events_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendCreativeToUserEvent.ProtoReflect.Descriptor instead.
func (*SendCreativeToUserEvent) Descriptor() ([]byte, []int) {
	return file_telegram_notification_events_proto_rawDescGZIP(), []int{5}
}

func (x *SendCreativeToUserEvent) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SendCreativeToUserEvent) GetCreativeStoredIn() *CreativeStoredIn {
	if x != nil {
		return x.CreativeStoredIn
	}
	return nil
}

func (x *SendCreativeToUserEvent) GetPlacementChannelName() string {
	if x != nil {
		return x.PlacementChannelName
	}
	return ""
}

func (x *SendCreativeToUserEvent) GetPlacementChannelLink() string {
	if x != nil {
		return x.PlacementChannelLink
	}
	return ""
}

type TelegramNotificationEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType     NotificationEventType  `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=schema.kafka.NotificationEventType" json:"event_type,omitempty"`
	EventDatetime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=event_datetime,json=eventDatetime,proto3" json:"event_datetime,omitempty"`
	// Types that are assignable to Event:
	//
	//	*TelegramNotificationEvent_BalanceReplenishmentEvent
	//	*TelegramNotificationEvent_BalanceWithdrawalEvent
	//	*TelegramNotificationEvent_PostRequestEvent
	//	*TelegramNotificationEvent_ChangePurchaseStatusEvent
	//	*TelegramNotificationEvent_SendAdvRequestToManagerEvent
	//	*TelegramNotificationEvent_SendCreativeToUserEvent
	Event isTelegramNotificationEvent_Event `protobuf_oneof:"event"`
}

func (x *TelegramNotificationEvent) Reset() {
	*x = TelegramNotificationEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_telegram_notification_events_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelegramNotificationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelegramNotificationEvent) ProtoMessage() {}

func (x *TelegramNotificationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_telegram_notification_events_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelegramNotificationEvent.ProtoReflect.Descriptor instead.
func (*TelegramNotificationEvent) Descriptor() ([]byte, []int) {
	return file_telegram_notification_events_proto_rawDescGZIP(), []int{6}
}

func (x *TelegramNotificationEvent) GetEventType() NotificationEventType {
	if x != nil {
		return x.EventType
	}
	return NotificationEventType_UNSPECIFIED_EVENT_TYPE
}

func (x *TelegramNotificationEvent) GetEventDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventDatetime
	}
	return nil
}

func (m *TelegramNotificationEvent) GetEvent() isTelegramNotificationEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *TelegramNotificationEvent) GetBalanceReplenishmentEvent() *BalanceReplenishmentEvent {
	if x, ok := x.GetEvent().(*TelegramNotificationEvent_BalanceReplenishmentEvent); ok {
		return x.BalanceReplenishmentEvent
	}
	return nil
}

func (x *TelegramNotificationEvent) GetBalanceWithdrawalEvent() *BalanceWithdrawalEvent {
	if x, ok := x.GetEvent().(*TelegramNotificationEvent_BalanceWithdrawalEvent); ok {
		return x.BalanceWithdrawalEvent
	}
	return nil
}

func (x *TelegramNotificationEvent) GetPostRequestEvent() *PostRequestEvent {
	if x, ok := x.GetEvent().(*TelegramNotificationEvent_PostRequestEvent); ok {
		return x.PostRequestEvent
	}
	return nil
}

func (x *TelegramNotificationEvent) GetChangePurchaseStatusEvent() *ChangePurchaseStatusEvent {
	if x, ok := x.GetEvent().(*TelegramNotificationEvent_ChangePurchaseStatusEvent); ok {
		return x.ChangePurchaseStatusEvent
	}
	return nil
}

func (x *TelegramNotificationEvent) GetSendAdvRequestToManagerEvent() *PostRequestEvent {
	if x, ok := x.GetEvent().(*TelegramNotificationEvent_SendAdvRequestToManagerEvent); ok {
		return x.SendAdvRequestToManagerEvent
	}
	return nil
}

func (x *TelegramNotificationEvent) GetSendCreativeToUserEvent() *SendCreativeToUserEvent {
	if x, ok := x.GetEvent().(*TelegramNotificationEvent_SendCreativeToUserEvent); ok {
		return x.SendCreativeToUserEvent
	}
	return nil
}

type isTelegramNotificationEvent_Event interface {
	isTelegramNotificationEvent_Event()
}

type TelegramNotificationEvent_BalanceReplenishmentEvent struct {
	BalanceReplenishmentEvent *BalanceReplenishmentEvent `protobuf:"bytes,3,opt,name=balance_replenishment_event,json=balanceReplenishmentEvent,proto3,oneof"`
}

type TelegramNotificationEvent_BalanceWithdrawalEvent struct {
	BalanceWithdrawalEvent *BalanceWithdrawalEvent `protobuf:"bytes,4,opt,name=balance_withdrawal_event,json=balanceWithdrawalEvent,proto3,oneof"`
}

type TelegramNotificationEvent_PostRequestEvent struct {
	PostRequestEvent *PostRequestEvent `protobuf:"bytes,5,opt,name=post_request_event,json=postRequestEvent,proto3,oneof"`
}

type TelegramNotificationEvent_ChangePurchaseStatusEvent struct {
	ChangePurchaseStatusEvent *ChangePurchaseStatusEvent `protobuf:"bytes,6,opt,name=change_purchase_status_event,json=changePurchaseStatusEvent,proto3,oneof"`
}

type TelegramNotificationEvent_SendAdvRequestToManagerEvent struct {
	SendAdvRequestToManagerEvent *PostRequestEvent `protobuf:"bytes,7,opt,name=send_adv_request_to_manager_event,json=sendAdvRequestToManagerEvent,proto3,oneof"`
}

type TelegramNotificationEvent_SendCreativeToUserEvent struct {
	SendCreativeToUserEvent *SendCreativeToUserEvent `protobuf:"bytes,8,opt,name=send_creative_to_user_event,json=sendCreativeToUserEvent,proto3,oneof"`
}

func (*TelegramNotificationEvent_BalanceReplenishmentEvent) isTelegramNotificationEvent_Event() {}

func (*TelegramNotificationEvent_BalanceWithdrawalEvent) isTelegramNotificationEvent_Event() {}

func (*TelegramNotificationEvent_PostRequestEvent) isTelegramNotificationEvent_Event() {}

func (*TelegramNotificationEvent_ChangePurchaseStatusEvent) isTelegramNotificationEvent_Event() {}

func (*TelegramNotificationEvent_SendAdvRequestToManagerEvent) isTelegramNotificationEvent_Event() {}

func (*TelegramNotificationEvent_SendCreativeToUserEvent) isTelegramNotificationEvent_Event() {}

var File_telegram_notification_events_proto protoreflect.FileDescriptor

var file_telegram_notification_events_proto_rawDesc = []byte{
	0x0a, 0x22, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x6b, 0x61, 0x66,
	0x6b, 0x61, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb0, 0x01,
	0x0a, 0x19, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x69,
	0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72,
	0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72,
	0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xad, 0x01, 0x0a, 0x16, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72,
	0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72,
	0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xa8, 0x01, 0x0a, 0x10, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xd3, 0x05, 0x0a, 0x10,
	0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49,
	0x64, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e,
	0x6b, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x6e,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x41, 0x0a,
	0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x15,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x67,
	0x72, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x13, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x52,
	0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x49,
	0x6e, 0x22, 0x94, 0x05, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x49, 0x64,
	0x12, 0x36, 0x0a, 0x17, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x6b,
	0x12, 0x34, 0x0a, 0x16, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x41, 0x0a, 0x0e,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0d, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x15, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72,
	0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x13, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x27, 0x0a, 0x0f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xec, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x6e,
	0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4c, 0x0a,
	0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64,
	0x5f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0x86, 0x06, 0x0a, 0x19, 0x54, 0x65, 0x6c, 0x65,
	0x67, 0x72, 0x61, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x69, 0x0a, 0x1b,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x69, 0x73,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61,
	0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x69, 0x73,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x19, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x60, 0x0a, 0x18, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x16, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x12, 0x70, 0x6f, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x6b,
	0x61, 0x66, 0x6b, 0x61, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x70, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x6a, 0x0a, 0x1c, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x19, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x69, 0x0a, 0x21, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x64,
	0x76, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x1c, 0x73, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x65, 0x0a, 0x1b, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x6b,
	0x61, 0x66, 0x6b, 0x61, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x17,
	0x73, 0x65, 0x6e, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x55, 0x73,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2a, 0x92, 0x02, 0x0a, 0x15, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x45, 0x4e, 0x49, 0x53, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d,
	0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57,
	0x41, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x12,
	0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x10, 0x04, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x41, 0x44, 0x56, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47,
	0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x05, 0x12,
	0x24, 0x0a, 0x20, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x54, 0x4f, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x06, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e,
	0x74, 0x65, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x73, 0x2f, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x73, 0x2f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2f, 0x67, 0x65, 0x6e, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_telegram_notification_events_proto_rawDescOnce sync.Once
	file_telegram_notification_events_proto_rawDescData = file_telegram_notification_events_proto_rawDesc
)

func file_telegram_notification_events_proto_rawDescGZIP() []byte {
	file_telegram_notification_events_proto_rawDescOnce.Do(func() {
		file_telegram_notification_events_proto_rawDescData = protoimpl.X.CompressGZIP(file_telegram_notification_events_proto_rawDescData)
	})
	return file_telegram_notification_events_proto_rawDescData
}

var file_telegram_notification_events_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_telegram_notification_events_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_telegram_notification_events_proto_goTypes = []interface{}{
	(NotificationEventType)(0),        // 0: schema.kafka.NotificationEventType
	(*BalanceReplenishmentEvent)(nil), // 1: schema.kafka.BalanceReplenishmentEvent
	(*BalanceWithdrawalEvent)(nil),    // 2: schema.kafka.BalanceWithdrawalEvent
	(*TelegramUserData)(nil),          // 3: schema.kafka.TelegramUserData
	(*PostRequestEvent)(nil),          // 4: schema.kafka.PostRequestEvent
	(*ChangePurchaseStatusEvent)(nil), // 5: schema.kafka.ChangePurchaseStatusEvent
	(*SendCreativeToUserEvent)(nil),   // 6: schema.kafka.SendCreativeToUserEvent
	(*TelegramNotificationEvent)(nil), // 7: schema.kafka.TelegramNotificationEvent
	(*timestamppb.Timestamp)(nil),     // 8: google.protobuf.Timestamp
	(*CreativeStoredIn)(nil),          // 9: schema.kafka.CreativeStoredIn
}
var file_telegram_notification_events_proto_depIdxs = []int32{
	8,  // 0: schema.kafka.PostRequestEvent.placement_date:type_name -> google.protobuf.Timestamp
	3,  // 1: schema.kafka.PostRequestEvent.applier_telegram_data:type_name -> schema.kafka.TelegramUserData
	9,  // 2: schema.kafka.PostRequestEvent.creative_stored_in:type_name -> schema.kafka.CreativeStoredIn
	8,  // 3: schema.kafka.ChangePurchaseStatusEvent.placement_date:type_name -> google.protobuf.Timestamp
	3,  // 4: schema.kafka.ChangePurchaseStatusEvent.applier_telegram_data:type_name -> schema.kafka.TelegramUserData
	9,  // 5: schema.kafka.SendCreativeToUserEvent.creative_stored_in:type_name -> schema.kafka.CreativeStoredIn
	0,  // 6: schema.kafka.TelegramNotificationEvent.event_type:type_name -> schema.kafka.NotificationEventType
	8,  // 7: schema.kafka.TelegramNotificationEvent.event_datetime:type_name -> google.protobuf.Timestamp
	1,  // 8: schema.kafka.TelegramNotificationEvent.balance_replenishment_event:type_name -> schema.kafka.BalanceReplenishmentEvent
	2,  // 9: schema.kafka.TelegramNotificationEvent.balance_withdrawal_event:type_name -> schema.kafka.BalanceWithdrawalEvent
	4,  // 10: schema.kafka.TelegramNotificationEvent.post_request_event:type_name -> schema.kafka.PostRequestEvent
	5,  // 11: schema.kafka.TelegramNotificationEvent.change_purchase_status_event:type_name -> schema.kafka.ChangePurchaseStatusEvent
	4,  // 12: schema.kafka.TelegramNotificationEvent.send_adv_request_to_manager_event:type_name -> schema.kafka.PostRequestEvent
	6,  // 13: schema.kafka.TelegramNotificationEvent.send_creative_to_user_event:type_name -> schema.kafka.SendCreativeToUserEvent
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_telegram_notification_events_proto_init() }
func file_telegram_notification_events_proto_init() {
	if File_telegram_notification_events_proto != nil {
		return
	}
	file_creative_stored_in_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_telegram_notification_events_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalanceReplenishmentEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telegram_notification_events_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalanceWithdrawalEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telegram_notification_events_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelegramUserData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telegram_notification_events_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostRequestEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telegram_notification_events_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePurchaseStatusEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telegram_notification_events_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendCreativeToUserEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_telegram_notification_events_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelegramNotificationEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_telegram_notification_events_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*TelegramNotificationEvent_BalanceReplenishmentEvent)(nil),
		(*TelegramNotificationEvent_BalanceWithdrawalEvent)(nil),
		(*TelegramNotificationEvent_PostRequestEvent)(nil),
		(*TelegramNotificationEvent_ChangePurchaseStatusEvent)(nil),
		(*TelegramNotificationEvent_SendAdvRequestToManagerEvent)(nil),
		(*TelegramNotificationEvent_SendCreativeToUserEvent)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_telegram_notification_events_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_telegram_notification_events_proto_goTypes,
		DependencyIndexes: file_telegram_notification_events_proto_depIdxs,
		EnumInfos:         file_telegram_notification_events_proto_enumTypes,
		MessageInfos:      file_telegram_notification_events_proto_msgTypes,
	}.Build()
	File_telegram_notification_events_proto = out.File
	file_telegram_notification_events_proto_rawDesc = nil
	file_telegram_notification_events_proto_goTypes = nil
	file_telegram_notification_events_proto_depIdxs = nil
}
