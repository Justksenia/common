// Code generated by ogen, DO NOT EDIT.

package gen

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateChannel implements createChannel operation.
	//
	// Create a new channel.
	//
	// POST /api/channels
	CreateChannel(ctx context.Context, req *CreateChannelReq) (CreateChannelRes, error)
	// CreateClient implements createClient operation.
	//
	// Create a new client.
	//
	// POST /api/clients
	CreateClient(ctx context.Context, req *CreateClientReq) (CreateClientRes, error)
	// CreateOrganisation implements createOrganisation operation.
	//
	// Create a new organisation.
	//
	// POST /api/organisations
	CreateOrganisation(ctx context.Context, req *CreateOrganisationReq) (CreateOrganisationRes, error)
	// GetChannels implements getChannels operation.
	//
	// Get all channels.
	//
	// GET /api/channels
	GetChannels(ctx context.Context, params GetChannelsParams) (GetChannelsRes, error)
	// GetClient implements getClient operation.
	//
	// Get a client.
	//
	// GET /api/clients/{clientID}
	GetClient(ctx context.Context, params GetClientParams) (GetClientRes, error)
	// GetClientByFilter implements getClientByFilter operation.
	//
	// Get a client.
	//
	// GET /api/clients
	GetClientByFilter(ctx context.Context, params GetClientByFilterParams) (GetClientByFilterRes, error)
	// GetCommissions implements getCommissions operation.
	//
	// Get all commissions.
	//
	// GET /api/commissions
	GetCommissions(ctx context.Context) (GetCommissionsRes, error)
	// GetDiscounts implements getDiscounts operation.
	//
	// Get all discounts.
	//
	// GET /api/discounts
	GetDiscounts(ctx context.Context, params GetDiscountsParams) (GetDiscountsRes, error)
	// GetOrganisation implements getOrganisation operation.
	//
	// Get an organisation.
	//
	// GET /api/organisations/{organisationID}
	GetOrganisation(ctx context.Context, params GetOrganisationParams) (GetOrganisationRes, error)
	// UpdateClient implements updateClient operation.
	//
	// Update a client.
	//
	// PUT /api/clients/{clientID}
	UpdateClient(ctx context.Context, req *UpdateClientReq, params UpdateClientParams) (UpdateClientRes, error)
	// UpdateOrganisation implements updateOrganisation operation.
	//
	// Update an organisation.
	//
	// PUT /api/organisations/{organisationID}
	UpdateOrganisation(ctx context.Context, req *UpdateOrganisationReq, params UpdateOrganisationParams) (UpdateOrganisationRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
