// Code generated by ogen, DO NOT EDIT.

package gen

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// GetChannelsParams is parameters of getChannels operation.
type GetChannelsParams struct {
	FiltersVerificationDateGte string
}

func unpackGetChannelsParams(packed middleware.Parameters) (params GetChannelsParams) {
	{
		key := middleware.ParameterKey{
			Name: "filters[verification_date][$gte]",
			In:   "query",
		}
		params.FiltersVerificationDateGte = packed[key].(string)
	}
	return params
}

func decodeGetChannelsParams(args [0]string, argsEscaped bool, r *http.Request) (params GetChannelsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: filters[verification_date][$gte].
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filters[verification_date][$gte]",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.FiltersVerificationDateGte = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filters[verification_date][$gte]",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetClientParams is parameters of getClient operation.
type GetClientParams struct {
	ClientID ClientCrmID
	Populate OptString
}

func unpackGetClientParams(packed middleware.Parameters) (params GetClientParams) {
	{
		key := middleware.ParameterKey{
			Name: "clientID",
			In:   "path",
		}
		params.ClientID = packed[key].(ClientCrmID)
	}
	{
		key := middleware.ParameterKey{
			Name: "populate",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Populate = v.(OptString)
		}
	}
	return params
}

func decodeGetClientParams(args [1]string, argsEscaped bool, r *http.Request) (params GetClientParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: clientID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "clientID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotClientIDVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotClientIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ClientID = ClientCrmID(paramsDotClientIDVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "clientID",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: populate.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "populate",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPopulateVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotPopulateVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Populate.SetTo(paramsDotPopulateVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "populate",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetClientByFilterParams is parameters of getClientByFilter operation.
type GetClientByFilterParams struct {
	FiltersClientIDEq OptUserID
}

func unpackGetClientByFilterParams(packed middleware.Parameters) (params GetClientByFilterParams) {
	{
		key := middleware.ParameterKey{
			Name: "filters[clientID][$eq]",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FiltersClientIDEq = v.(OptUserID)
		}
	}
	return params
}

func decodeGetClientByFilterParams(args [0]string, argsEscaped bool, r *http.Request) (params GetClientByFilterParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: filters[clientID][$eq].
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filters[clientID][$eq]",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFiltersClientIDEqVal UserID
				if err := func() error {
					var paramsDotFiltersClientIDEqValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotFiltersClientIDEqValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotFiltersClientIDEqVal = UserID(paramsDotFiltersClientIDEqValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.FiltersClientIDEq.SetTo(paramsDotFiltersClientIDEqVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filters[clientID][$eq]",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetDiscountsParams is parameters of getDiscounts operation.
type GetDiscountsParams struct {
	FiltersClientIDEq OptUserID
}

func unpackGetDiscountsParams(packed middleware.Parameters) (params GetDiscountsParams) {
	{
		key := middleware.ParameterKey{
			Name: "filters[clientID][$eq]",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.FiltersClientIDEq = v.(OptUserID)
		}
	}
	return params
}

func decodeGetDiscountsParams(args [0]string, argsEscaped bool, r *http.Request) (params GetDiscountsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: filters[clientID][$eq].
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "filters[clientID][$eq]",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFiltersClientIDEqVal UserID
				if err := func() error {
					var paramsDotFiltersClientIDEqValVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotFiltersClientIDEqValVal = c
						return nil
					}(); err != nil {
						return err
					}
					paramsDotFiltersClientIDEqVal = UserID(paramsDotFiltersClientIDEqValVal)
					return nil
				}(); err != nil {
					return err
				}
				params.FiltersClientIDEq.SetTo(paramsDotFiltersClientIDEqVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "filters[clientID][$eq]",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetOrganisationParams is parameters of getOrganisation operation.
type GetOrganisationParams struct {
	// ID of the organisation to get.
	OrganisationID string
}

func unpackGetOrganisationParams(packed middleware.Parameters) (params GetOrganisationParams) {
	{
		key := middleware.ParameterKey{
			Name: "organisationID",
			In:   "path",
		}
		params.OrganisationID = packed[key].(string)
	}
	return params
}

func decodeGetOrganisationParams(args [1]string, argsEscaped bool, r *http.Request) (params GetOrganisationParams, _ error) {
	// Decode path: organisationID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organisationID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganisationID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organisationID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateClientParams is parameters of updateClient operation.
type UpdateClientParams struct {
	ClientID ClientCrmID
}

func unpackUpdateClientParams(packed middleware.Parameters) (params UpdateClientParams) {
	{
		key := middleware.ParameterKey{
			Name: "clientID",
			In:   "path",
		}
		params.ClientID = packed[key].(ClientCrmID)
	}
	return params
}

func decodeUpdateClientParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateClientParams, _ error) {
	// Decode path: clientID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "clientID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotClientIDVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotClientIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ClientID = ClientCrmID(paramsDotClientIDVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "clientID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateOrganisationParams is parameters of updateOrganisation operation.
type UpdateOrganisationParams struct {
	// ID of the organisation to get.
	OrganisationID string
}

func unpackUpdateOrganisationParams(packed middleware.Parameters) (params UpdateOrganisationParams) {
	{
		key := middleware.ParameterKey{
			Name: "organisationID",
			In:   "path",
		}
		params.OrganisationID = packed[key].(string)
	}
	return params
}

func decodeUpdateOrganisationParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateOrganisationParams, _ error) {
	// Decode path: organisationID.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organisationID",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganisationID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organisationID",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
